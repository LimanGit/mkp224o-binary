name: Compile and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux-amd64
          - target: x86_64-pc-windows-gnu
            os: windows-amd64
          - target: aarch64-unknown-linux-gnu
            os: linux-arm64
          - target: x86_64-apple-darwin
            os: darwin-amd64
          - target: aarch64-apple-darwin
            os: darwin-arm64
          - target: i686-pc-windows-gnu
            os: windows-i686

    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc libc6-dev libsodium-dev make autoconf mingw-w64 binutils-aarch64-linux-gnu jq

      - name: Configure Build Environment
        run: |
          case ${{ matrix.target }} in
            x86_64-pc-windows-gnu)
              export CC=x86_64-w64-mingw32-gcc
              export CXX=x86_64-w64-mingw32-g++
              export AR=x86_64-w64-mingw32-ar
              export RANLIB=x86_64-w64-mingw32-ranlib
              ;;
            i686-pc-windows-gnu)
              export CC=i686-w64-mingw32-gcc
              export CXX=i686-w64-mingw32-g++
              export AR=i686-w64-mingw32-ar
              export RANLIB=i686-w64-mingw32-ranlib
              ;;
            aarch64-unknown-linux-gnu)
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
              export AR=aarch64-linux-gnu-ar
              export RANLIB=aarch64-linux-gnu-ranlib
              ;;
            *)
              export CC=gcc
              export CXX=g++
              export AR=ar
              export RANLIB=ranlib
              ;;
          esac

      - name: Generate Configure Script (if applicable)
        run: ./autogen.sh

      - name: Configure Build for Specific Target
        run: ./configure --target=${{ matrix.target }}

      - name: Build Executable
        run: make

      - name: Archive Executable
        run: |
          mkdir -p release
          target_parts=$(echo '${{ matrix.target }}' | jq -Rs 'split("-")')
          target_arch=$(echo $target_parts | jq -r '.[0]')
          target_os=$(echo $target_parts | jq -r '.[1] + "-" + .[2]')

          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            mv mkp224o "release/mkp224o-${{ matrix.os }}.exe"
          else
            mv mkp224o "release/mkp224o-${{ matrix.os }}"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: executables-${{ matrix.os }}
          path: release/mkp224o-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/mkp224o*
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
